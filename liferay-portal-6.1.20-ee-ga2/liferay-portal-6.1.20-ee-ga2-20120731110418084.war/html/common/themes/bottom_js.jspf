<%--
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */
--%>

<%@ include file="/html/portal/layout/view/portlet_js.jspf" %>

<%@ page import="com.liferay.portlet.sites.util.SitesUtil" %>

<aui:script position="inline">
	Liferay.Util.addInputFocus();

	<c:if test="<%= (runtimePortletIds != null) && !runtimePortletIds.isEmpty() && !layoutTypePortlet.hasStateMax() %>">
		Liferay.Portlet.runtimePortletIds = ['<%= ListUtil.toString(portlets, Portlet.PORTLET_ID_ACCESSOR, "','") %>'];
	</c:if>

	<%
	String controlPanelCategory = ParamUtil.getString(request, "controlPanelCategory");
	%>

	<c:choose>
		<c:when test="<%= themeDisplay.isStatePopUp() || Validator.isNotNull(controlPanelCategory) %>">
			Liferay.Util.getTop().Liferay.fire(
				'popupReady',
				{
					doc: document,
					win: window,
					windowName: Liferay.Util.getWindowName()
				}
			);
		</c:when>
		<c:otherwise>

			<%
			String scroll = ParamUtil.getString(request, "scroll");
			%>

			<c:if test="<%= Validator.isNotNull(scroll) %>">
				Liferay.on(
					'allPortletsReady',
					function(event) {
						document.getElementById('<%= HtmlUtil.escape(scroll) %>').scrollIntoView();
					}
				);
			</c:if>
		</c:otherwise>
	</c:choose>
</aui:script>

<aui:script use="aui-base">
	Liferay.Util.addInputType();

	Liferay.Portlet.ready(
		function(portletId, node) {
			Liferay.Util.addInputType(node);
		}
	);
</aui:script>

<%
Group group = null;

LayoutRevision layoutRevision = null;

if (layout != null) {
	group = layout.getGroup();

	layoutRevision = LayoutStagingUtil.getLayoutRevision(layout);
}
%>

<c:if test="<%= !themeDisplay.isStatePopUp() && !group.isControlPanel() && (layout != null) && (!group.hasStagingGroup() || group.isStagingGroup()) && (GroupPermissionUtil.contains(permissionChecker, scopeGroupId, ActionKeys.ADD_LAYOUT) || LayoutPermissionUtil.contains(permissionChecker, layout, ActionKeys.UPDATE) || (layoutTypePortlet.isCustomizable() && LayoutPermissionUtil.contains(permissionChecker, layout, ActionKeys.CUSTOMIZE))) %>">
	<c:if test="<%= layout.isTypePortlet() %>">
		<aui:script>
			Liferay.Data.layoutConfig = {
				container: '#main-content',

				<c:choose>
					<c:when test="<%= !themeDisplay.isFreeformLayout() %>">
						dropNodes: '.portlet-column',
						handles: ['.portlet-title', '.portlet-title-default'],
					</c:when>
					<c:otherwise>
						dropNodes: '.portlet-boundary',
						freeForm: true,
						freeformPlaceholderClass: 'lfr-freeform-layout-drag-indicator',
						handles: ['.portlet-header-bar', '.portlet-title-default', '.portlet-topper'],
					</c:otherwise>
				</c:choose>

				disabledDropContainerClass: 'portlet-dropzone-disabled',
				dragNodes: '.portlet-boundary:not(.portlet-static)',
				dropContainer: '.portlet-dropzone',
				emptyColumnClass: 'empty',
				invalid: '.portlet-static',
				nestedPortletId: '_<%= PortletKeys.NESTED_PORTLETS %>_INSTANCE',
				portletBoundary: '.portlet-boundary'
			};
		</aui:script>

		<aui:script use="liferay-layout">
			<%-- aui:script won't accept a null body --%>
		</aui:script>
	</c:if>

	<aui:script use="liferay-navigation">
		Liferay.once(
			'initNavigation',
			function() {
				new Liferay.Navigation(
					{
						hasAddLayoutPermission: <%= GroupPermissionUtil.contains(permissionChecker, scopeGroupId, ActionKeys.ADD_LAYOUT) %>,
						layoutIds: [

							<%
							for (int i = 0; (layouts != null) && (i < layouts.size()); i++) {
								Layout curLayout = (Layout)layouts.get(i);

								boolean updateable = SitesUtil.isLayoutUpdateable(curLayout);
								boolean deleteable = updateable && LayoutPermissionUtil.contains(themeDisplay.getPermissionChecker(), curLayout, ActionKeys.DELETE);
							%>

								{
									deletable: <%= deleteable %>,
									id: <%= curLayout.getLayoutId() %>,
									updateable: <%= updateable %>
								},

							<%
							}
							%>

							],

						<c:if test="<%= layoutRevision != null %>">
							layoutSetBranchId: '<%= layoutRevision.getLayoutSetBranchId() %>',
						</c:if>

						navBlock: navBlock
					}
				);
			}
		);

		var navBlock = A.one('#navigation');

		if (navBlock) {
			navBlock.once(
				'mousemove',
				function() {
					Liferay.fire('initNavigation');
				}
			);
		}
	</aui:script>
</c:if>

<aui:script use="liferay-menu,liferay-notice,liferay-poller">
	new Liferay.Menu();

	var liferayNotices = Liferay.Data.notices;

	for (var i = 1; i < liferayNotices.length; i++) {
		new Liferay.Notice(liferayNotices[i]);
	}

	<c:if test="<%= themeDisplay.isSignedIn() %>">
		Liferay.Poller.init(
			{
				encryptedUserId: '<%= Encryptor.encrypt(company.getKeyObj(), String.valueOf(themeDisplay.getUserId())) %>',
				supportsComet: <%= ServerDetector.isSupportsComet() %>
			}
		);
	</c:if>
</aui:script>